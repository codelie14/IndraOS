#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional, Union, Set
import fnmatch
import logging
import shutil


class DirectoryTreeExplorer:
    """Explorateur d'arborescence de dossiers avec options avanc√©es."""
    
    # Patterns d'exclusion par d√©faut plus complets
    DEFAULT_EXCLUDE_PATTERNS = [
        # Fichiers Python
        '*.pyc', '*.pyo', '*.pyd', '__pycache__', '*.egg-info',
        # Environnements virtuels Python
        'venv', 'env', '.venv', '.env', 'virtualenv', '.virtualenv',
        'pipenv', '.pipenv', 'conda-meta',
        # Node.js
        'node_modules', 'npm-debug.log', 'yarn-error.log', '.npm', '.yarn',
        # Git et autres VCS
        '.git', '.svn', '.hg', '.bzr', 'CVS',
        # IDE et √©diteurs
        '.vscode', '.idea', '*.swp', '*.swo', '*~', '.DS_Store', 'Thumbs.db',
        # Build et cache
        'build', 'dist', '.cache', '.pytest_cache', '.mypy_cache', '.tox',
        'target', 'bin', 'obj', '.gradle',
        # Logs et temporaires
        '*.log', '*.tmp', '*.temp', '*.bak', '*.old', '*.orig',
        # Archives et binaires
        '*.zip', '*.rar', '*.7z', '*.tar', '*.gz', '*.exe', '*.dll', '*.so',
        # Documentation g√©n√©r√©e
        'docs/_build', 'site', '_site',
        # Autres
        '.coverage', '.nyc_output', 'coverage', '.sass-cache'
    ]
    
    def __init__(self, show_hidden: bool = False, show_size: bool = True, 
                 max_depth: int = None, exclude_patterns: List[str] = None,
                 use_default_excludes: bool = True, custom_excludes: List[str] = None):
        """
        Initialise l'explorateur.
        
        Args:
            show_hidden: Afficher les fichiers/dossiers cach√©s
            show_size: Afficher les tailles des fichiers
            max_depth: Profondeur maximale d'exploration
            exclude_patterns: Patterns √† exclure (remplace les d√©fauts si fourni)
            use_default_excludes: Utiliser les exclusions par d√©faut
            custom_excludes: Patterns d'exclusion suppl√©mentaires
        """
        self.show_hidden = show_hidden
        self.show_size = show_size
        self.max_depth = max_depth
        
        # Gestion des patterns d'exclusion
        if exclude_patterns is not None:
            # Utilisation des patterns fournis uniquement
            self.exclude_patterns = exclude_patterns
        else:
            # Combinaison des patterns par d√©faut et personnalis√©s
            self.exclude_patterns = []
            if use_default_excludes:
                self.exclude_patterns.extend(self.DEFAULT_EXCLUDE_PATTERNS)
            if custom_excludes:
                self.exclude_patterns.extend(custom_excludes)
        
        # Cache pour les exclusions (optimisation)
        self._exclude_cache: Dict[str, bool] = {}
        
        # Statistiques
        self.stats = {
            'total_dirs': 0,
            'total_files': 0,
            'total_size': 0,
            'largest_file': {'name': '', 'size': 0},
            'file_types': {},
            'empty_dirs': 0,
            'excluded_items': 0,
            'permission_errors': 0
        }
        
        # Configuration du logging
        logging.basicConfig(level=logging.WARNING)
        self.logger = logging.getLogger(__name__)
    
    def _should_exclude(self, path: Path) -> bool:
        """V√©rifie si un chemin doit √™tre exclu avec cache."""
        path_str = str(path)
        
        # V√©rification du cache
        if path_str in self._exclude_cache:
            return self._exclude_cache[path_str]
        
        name = path.name
        should_exclude = False
        
        # Fichiers cach√©s (commence par .)
        if not self.show_hidden and name.startswith('.'):
            should_exclude = True
        
        # Patterns d'exclusion
        if not should_exclude:
            for pattern in self.exclude_patterns:
                if fnmatch.fnmatch(name, pattern) or fnmatch.fnmatch(path_str, pattern):
                    should_exclude = True
                    break
        
        # Mise en cache du r√©sultat
        self._exclude_cache[path_str] = should_exclude
        
        if should_exclude:
            self.stats['excluded_items'] += 1
        
        return should_exclude
    
    def _format_size(self, size_bytes: int) -> str:
        """Formate la taille en unit√©s lisibles."""
        if size_bytes == 0:
            return "0 B"
        
        for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} EB"
    
    def _get_file_icon(self, path: Path) -> str:
        """Retourne une ic√¥ne bas√©e sur le type de fichier."""
        if path.is_dir():
            # Ic√¥nes sp√©ciales pour certains dossiers
            special_dirs = {
                '.git': 'üîß', '.vscode': 'üíô', '.idea': 'üß†',
                'node_modules': 'üì¶', 'venv': 'üêç', 'env': 'üêç',
                'build': 'üî®', 'dist': 'üì¶', 'src': 'üìù',
                'test': 'üß™', 'tests': 'üß™', 'docs': 'üìö'
            }
            return special_dirs.get(path.name.lower(), "üìÅ")
        
        suffix = path.suffix.lower()
        icons = {
            '.txt': 'üìÑ', '.md': 'üìù', '.pdf': 'üìï', '.doc': 'üìò', '.docx': 'üìò',
            '.xls': 'üìä', '.xlsx': 'üìä', '.csv': 'üìã', '.json': 'üîß', '.xml': 'üîß',
            '.yml': '‚öôÔ∏è', '.yaml': '‚öôÔ∏è', '.toml': '‚öôÔ∏è', '.ini': '‚öôÔ∏è', '.cfg': '‚öôÔ∏è',
            '.py': 'üêç', '.js': '‚ö°', '.ts': 'üíé', '.html': 'üåê', '.css': 'üé®', '.scss': 'üé®',
            '.php': 'üêò', '.java': '‚òï', '.cpp': '‚öôÔ∏è', '.c': '‚öôÔ∏è', '.cs': 'üíô', '.go': 'üêπ',
            '.rs': 'ü¶Ä', '.rb': 'üíé', '.swift': 'üçé', '.kt': 'üüß', '.dart': 'üéØ',
            '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.gif': 'üé¨', '.svg': 'üé≠', '.ico': 'üñºÔ∏è',
            '.mp4': 'üé•', '.avi': 'üé•', '.mkv': 'üé•', '.mov': 'üé•', '.webm': 'üé•',
            '.mp3': 'üéµ', '.wav': 'üéµ', '.flac': 'üéµ', '.ogg': 'üéµ', '.m4a': 'üéµ',
            '.zip': 'üì¶', '.rar': 'üì¶', '.7z': 'üì¶', '.tar': 'üì¶', '.gz': 'üì¶',
            '.exe': '‚öôÔ∏è', '.msi': 'üì¶', '.deb': 'üì¶', '.rpm': 'üì¶', '.dmg': 'üíΩ',
            '.iso': 'üíΩ', '.img': 'üíΩ', '.vdi': 'üíΩ', '.vmdk': 'üíΩ',
            '.sql': 'üóÉÔ∏è', '.db': 'üóÉÔ∏è', '.sqlite': 'üóÉÔ∏è', '.sqlite3': 'üóÉÔ∏è',
            '.log': 'üìã', '.env': 'üîê', '.gitignore': 'üö´', '.dockerignore': 'üö´',
            '.dockerfile': 'üê≥', '.docker-compose.yml': 'üê≥', '.docker-compose.yaml': 'üê≥',
            '.makefile': 'üî®', '.cmake': 'üî®', '.gradle': 'üêò', '.maven': '‚òï',
        }
        return icons.get(suffix, 'üìÑ')
    
    def copy_to_clipboard(self, text: str) -> bool:
        """Copie le texte dans le presse-papiers."""
        try:
            # Tentative avec pyperclip (n√©cessite installation)
            try:
                import pyperclip
                pyperclip.copy(text)
                return True
            except ImportError:
                pass
            
            # Alternatives syst√®me
            if shutil.which('pbcopy'):  # macOS
                import subprocess
                subprocess.run(['pbcopy'], input=text.encode(), check=True)
                return True
            elif shutil.which('xclip'):  # Linux avec xclip
                import subprocess
                subprocess.run(['xclip', '-selection', 'clipboard'], 
                             input=text.encode(), check=True)
                return True
            elif shutil.which('wl-copy'):  # Linux avec Wayland
                import subprocess
                subprocess.run(['wl-copy'], input=text.encode(), check=True)
                return True
            elif sys.platform == 'win32':  # Windows
                import subprocess
                subprocess.run(['clip'], input=text.encode(), shell=True, check=True)
                return True
                
        except Exception as e:
            self.logger.warning(f"√âchec de la copie dans le presse-papiers: {e}")
        
        return False
    
    def _get_dir_size(self, directory: Path) -> int:
        """Calcule la taille totale d'un dossier."""
        total_size = 0
        try:
            for path in directory.rglob('*'):
                if path.is_file() and not self._should_exclude(path):
                    try:
                        total_size += path.stat().st_size
                    except (OSError, PermissionError):
                        self.stats['permission_errors'] += 1
                        continue
        except (OSError, PermissionError):
            self.stats['permission_errors'] += 1
        return total_size
    
    def _update_stats(self, path: Path):
        """Met √† jour les statistiques."""
        if path.is_dir():
            self.stats['total_dirs'] += 1
            # V√©rifier si le dossier est vide
            try:
                if not any(item for item in path.iterdir() if not self._should_exclude(item)):
                    self.stats['empty_dirs'] += 1
            except (OSError, PermissionError):
                self.stats['permission_errors'] += 1
        else:
            self.stats['total_files'] += 1
            
            try:
                file_size = path.stat().st_size
                self.stats['total_size'] += file_size
                
                # Fichier le plus volumineux
                if file_size > self.stats['largest_file']['size']:
                    self.stats['largest_file'] = {
                        'name': str(path),
                        'size': file_size
                    }
                
                # Types de fichiers
                ext = path.suffix.lower() or 'no_extension'
                self.stats['file_types'][ext] = self.stats['file_types'].get(ext, 0) + 1
                
            except (OSError, PermissionError):
                self.stats['permission_errors'] += 1
    
    def generate_tree(self, directory: Union[str, Path], prefix: str = "", 
                     current_depth: int = 0) -> List[str]:
        """
        G√©n√®re l'arborescence d'un dossier.
        
        Args:
            directory: Chemin du dossier √† explorer
            prefix: Pr√©fixe pour l'indentation
            current_depth: Profondeur actuelle
            
        Returns:
            Liste des lignes de l'arborescence
        """
        directory = Path(directory)
        lines = []
        
        if not directory.exists():
            return [f"‚ùå Dossier inexistant: {directory}"]
        
        if not directory.is_dir():
            return [f"‚ùå Pas un dossier: {directory}"]
        
        # V√©rification de la profondeur maximale
        if self.max_depth is not None and current_depth >= self.max_depth:
            return []
        
        try:
            # R√©cup√©ration et tri des √©l√©ments
            items = []
            for item in directory.iterdir():
                if not self._should_exclude(item):
                    items.append(item)
            
            # Tri : dossiers d'abord, puis fichiers, alphab√©tique
            items.sort(key=lambda x: (not x.is_dir(), x.name.lower()))
            
            for i, item in enumerate(items):
                try:
                    is_last = i == len(items) - 1
                    
                    # Symboles pour l'arborescence
                    if is_last:
                        current_prefix = "‚îî‚îÄ‚îÄ "
                        next_prefix = prefix + "    "
                    else:
                        current_prefix = "‚îú‚îÄ‚îÄ "
                        next_prefix = prefix + "‚îÇ   "
                    
                    # Ic√¥ne et nom
                    icon = self._get_file_icon(item)
                    name = item.name
                    
                    # Informations suppl√©mentaires
                    info_parts = []
                    
                    if item.is_file() and self.show_size:
                        try:
                            size = item.stat().st_size
                            info_parts.append(self._format_size(size))
                        except (OSError, PermissionError):
                            info_parts.append("? B")
                            self.stats['permission_errors'] += 1
                    
                    # Construction de la ligne
                    line = f"{prefix}{current_prefix}{icon} {name}"
                    if info_parts:
                        line += f" ({', '.join(info_parts)})"
                    
                    lines.append(line)
                    
                    # Mise √† jour des statistiques
                    self._update_stats(item)
                    
                    # R√©cursion pour les sous-dossiers
                    if item.is_dir():
                        sub_lines = self.generate_tree(
                            item, next_prefix, current_depth + 1
                        )
                        lines.extend(sub_lines)
                
                except (OSError, PermissionError) as e:
                    self.logger.warning(f"Acc√®s refus√©: {item} - {e}")
                    lines.append(f"{prefix}‚îú‚îÄ‚îÄ ‚ùå {item.name} (Acc√®s refus√©)")
                    self.stats['permission_errors'] += 1
        
        except (OSError, PermissionError) as e:
            self.logger.error(f"Erreur lecture dossier {directory}: {e}")
            lines.append(f"‚ùå Erreur lecture: {e}")
            self.stats['permission_errors'] += 1
        
        return lines
    
    def print_tree(self, directory: Union[str, Path], copy_to_clipboard: bool = False):
        """Affiche l'arborescence d'un dossier."""
        directory = Path(directory).resolve()
        
        header = f"üìÇ Arborescence de: {directory}"
        separator = "=" * 80
        
        print(header)
        print(separator)
        
        # R√©initialisation des statistiques
        self._reset_stats()
        
        # G√©n√©ration de l'arborescence
        tree_lines = self.generate_tree(directory)
        
        # Construction du contenu complet
        content_lines = [header, separator, ""]
        content_lines.extend(tree_lines)
        
        # Affichage
        for line in tree_lines:
            print(line)
        
        # Affichage des statistiques
        stats_lines = self._get_statistics_lines()
        content_lines.extend([""] + stats_lines)
        
        self._print_statistics()
        
        # Copie dans le presse-papiers si demand√©e
        if copy_to_clipboard:
            full_content = "\n".join(content_lines + [""] + stats_lines)
            if self.copy_to_clipboard(full_content):
                print(f"\n‚úÖ Arborescence copi√©e dans le presse-papiers!")
            else:
                print(f"\n‚ö†Ô∏è Impossible de copier dans le presse-papiers")
                print("üí° Installez 'pip install pyperclip' pour activer cette fonctionnalit√©")
    
    def _reset_stats(self):
        """R√©initialise les statistiques."""
        self.stats = {
            'total_dirs': 0,
            'total_files': 0,
            'total_size': 0,
            'largest_file': {'name': '', 'size': 0},
            'file_types': {},
            'empty_dirs': 0,
            'excluded_items': 0,
            'permission_errors': 0
        }
        self._exclude_cache.clear()
    
    def _get_statistics_lines(self) -> List[str]:
        """Retourne les lignes de statistiques."""
        lines = [
            "=" * 80,
            "üìä STATISTIQUES",
            "=" * 80,
            f"üìÅ Dossiers: {self.stats['total_dirs']}",
            f"üìÑ Fichiers: {self.stats['total_files']}",
            f"üíæ Taille totale: {self._format_size(self.stats['total_size'])}"
        ]
        
        if self.stats['empty_dirs'] > 0:
            lines.append(f"üìÇ Dossiers vides: {self.stats['empty_dirs']}")
        
        if self.stats['excluded_items'] > 0:
            lines.append(f"üö´ √âl√©ments exclus: {self.stats['excluded_items']}")
        
        if self.stats['permission_errors'] > 0:
            lines.append(f"‚ö†Ô∏è Erreurs d'acc√®s: {self.stats['permission_errors']}")
        
        if self.stats['largest_file']['name']:
            lines.append(f"üóÉÔ∏è Plus gros fichier: {Path(self.stats['largest_file']['name']).name} "
                        f"({self._format_size(self.stats['largest_file']['size'])})")
        
        # Top 10 des types de fichiers
        if self.stats['file_types']:
            lines.append(f"\nüìà Types de fichiers les plus fr√©quents:")
            sorted_types = sorted(
                self.stats['file_types'].items(),
                key=lambda x: x[1],
                reverse=True
            )
            for ext, count in sorted_types[:10]:
                ext_display = ext if ext != 'no_extension' else '(sans extension)'
                lines.append(f"   {ext_display}: {count}")
        
        return lines
    
    def _print_statistics(self):
        """Affiche les statistiques de l'exploration."""
        for line in self._get_statistics_lines():
            print(line)
    
    def show_excluded_patterns(self):
        """Affiche les patterns d'exclusion actuels."""
        print("üö´ Patterns d'exclusion actifs:")
        print("=" * 40)
        for i, pattern in enumerate(self.exclude_patterns, 1):
            print(f"{i:2}. {pattern}")
        print(f"\nTotal: {len(self.exclude_patterns)} patterns")
    
    def save_to_file(self, directory: Union[str, Path], output_file: str, 
                    format_type: str = "txt"):
        """
        Sauvegarde l'arborescence dans un fichier.
        
        Args:
            directory: Dossier √† explorer
            output_file: Fichier de sortie
            format_type: Format (txt, json, html)
        """
        directory = Path(directory).resolve()
        self._reset_stats()
        
        if format_type.lower() == "json":
            self._save_to_json(directory, output_file)
        elif format_type.lower() == "html":
            self._save_to_html(directory, output_file)
        else:
            self._save_to_txt(directory, output_file)
    
    def _save_to_txt(self, directory: Path, output_file: str):
        """Sauvegarde en format texte."""
        tree_lines = self.generate_tree(directory)
        stats_lines = self._get_statistics_lines()
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"Arborescence de: {directory}\n")
            f.write(f"G√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write("=" * 80 + "\n\n")
            
            for line in tree_lines:
                f.write(line + "\n")
            
            f.write("\n")
            for line in stats_lines:
                f.write(line + "\n")
        
        print(f"‚úÖ Arborescence sauvegard√©e: {output_file}")
    
    def _build_json_tree(self, directory: Path, current_depth: int = 0) -> Dict:
        """Construit une structure JSON de l'arborescence."""
        if self.max_depth is not None and current_depth >= self.max_depth:
            return {}
        
        tree_data = {
            "name": directory.name,
            "path": str(directory),
            "type": "directory",
            "children": []
        }
        
        try:
            items = sorted(
                [item for item in directory.iterdir() if not self._should_exclude(item)],
                key=lambda x: (not x.is_dir(), x.name.lower())
            )
            
            for item in items:
                try:
                    if item.is_dir():
                        child_data = self._build_json_tree(item, current_depth + 1)
                        tree_data["children"].append(child_data)
                    else:
                        try:
                            file_size = item.stat().st_size
                        except (OSError, PermissionError):
                            file_size = 0
                        
                        file_data = {
                            "name": item.name,
                            "path": str(item),
                            "type": "file",
                            "size": file_size,
                            "extension": item.suffix.lower()
                        }
                        tree_data["children"].append(file_data)
                except (OSError, PermissionError):
                    continue
        
        except (OSError, PermissionError):
            pass
        
        return tree_data
    
    def _save_to_json(self, directory: Path, output_file: str):
        """Sauvegarde en format JSON."""
        tree_data = {
            "root_directory": str(directory),
            "generated_at": datetime.now().isoformat(),
            "configuration": {
                "show_hidden": self.show_hidden,
                "show_size": self.show_size,
                "max_depth": self.max_depth,
                "exclude_patterns": self.exclude_patterns
            },
            "statistics": self.stats,
            "tree": self._build_json_tree(directory)
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(tree_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Arborescence JSON sauvegard√©e: {output_file}")
    
    def _save_to_html(self, directory: Path, output_file: str):
        """Sauvegarde en format HTML."""
        tree_lines = self.generate_tree(directory)
        stats_lines = self._get_statistics_lines()
        
        html_content = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arborescence - {directory.name}</title>
    <style>
        body {{ 
            font-family: 'Courier New', monospace; 
            margin: 20px; 
            background: #1e1e1e; 
            color: #d4d4d4;
            line-height: 1.4;
        }}
        .header {{ 
            color: #569cd6; 
            border-bottom: 2px solid #569cd6; 
            padding-bottom: 10px; 
            margin-bottom: 20px;
        }}
        .tree {{ 
            white-space: pre-wrap; 
            background: #2d2d30;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }}
        .stats {{ 
            background: #2d2d30; 
            padding: 15px; 
            border-radius: 5px; 
            margin-top: 20px; 
        }}
        .stats h3 {{ 
            color: #569cd6; 
            margin-top: 0;
        }}
        .copy-btn {{
            background: #0e639c;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
        }}
        .copy-btn:hover {{
            background: #1177bb;
        }}
    </style>
    <script>
        function copyToClipboard() {{
            const treeContent = document.querySelector('.tree').textContent;
            const statsContent = document.querySelector('.stats').textContent;
            const fullContent = treeContent + '\\n\\n' + statsContent;
            
            navigator.clipboard.writeText(fullContent).then(() => {{
                const btn = document.querySelector('.copy-btn');
                const originalText = btn.textContent;
                btn.textContent = '‚úÖ Copi√©!';
                setTimeout(() => {{
                    btn.textContent = originalText;
                }}, 2000);
            }}).catch(err => {{
                console.error('Erreur lors de la copie:', err);
            }});
        }}
    </script>
</head>
<body>
    <div class="header">
        <h1>üìÇ Arborescence de {directory}</h1>
        <p>G√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        <button class="copy-btn" onclick="copyToClipboard()">üìã Copier l'arborescence</button>
    </div>
    
    <div class="tree">{"".join(line + "\\n" for line in tree_lines)}</div>
    
    <div class="stats">
        <h3>üìä Statistiques</h3>
{"".join(f"        <p>{line}</p>\\n" for line in stats_lines[3:] if not line.startswith("="))}
    </div>
</body>
</html>
"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ Arborescence HTML sauvegard√©e: {output_file}")


def main():
    """Fonction principale avec arguments en ligne de commande."""
    parser = argparse.ArgumentParser(
        description="Explorateur d'arborescence de dossiers am√©lior√©",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python DirectoryTreeExplorer.py /home/user                    # Arborescence basique
  python DirectoryTreeExplorer.py . --max-depth 3               # Profondeur limit√©e
  python DirectoryTreeExplorer.py ~/Documents --hidden --size   # Avec fichiers cach√©s
  python DirectoryTreeExplorer.py . --copy                      # Copie dans le presse-papiers
  python DirectoryTreeExplorer.py . --no-default-excludes       # Sans exclusions par d√©faut
  python DirectoryTreeExplorer.py . --add-exclude "*.bak,temp"  # Exclusions suppl√©mentaires
  python DirectoryTreeExplorer.py . --show-excludes             # Voir les patterns d'exclusion
  python DirectoryTreeExplorer.py . --output tree.txt           # Sauvegarde en fichier
  python DirectoryTreeExplorer.py . --output tree.json --format json  # Export JSON
        """
    )
    
    parser.add_argument("directory", 
                       nargs="?", 
                       default=".", 
                       help="Dossier √† explorer (d√©faut: dossier courant)")
    
    parser.add_argument("--hidden", 
                       action="store_true",
                       help="Afficher les fichiers et dossiers cach√©s")
    
    parser.add_argument("--no-size", 
                       action="store_true",
                       help="Ne pas afficher les tailles des fichiers")
    
    parser.add_argument("--max-depth", "-d",
                       type=int,
                       help="Profondeur maximale d'exploration")
    
    parser.add_argument("--exclude", "-e",
                       help="Patterns √† exclure (remplace les d√©fauts, s√©par√©s par des virgules)")
    
    parser.add_argument("--add-exclude", "-a",
                       help="Patterns d'exclusion suppl√©mentaires (s√©par√©s par des virgules)")
    
    parser.add_argument("--no-default-excludes",
                       action="store_true",
                       help="Ne pas utiliser les patterns d'exclusion par d√©faut")
    
    parser.add_argument("--show-excludes",
                       action="store_true",
                       help="Afficher les patterns d'exclusion actifs et quitter")
    
    parser.add_argument("--copy", "-c",
                       action="store_true",
                       help="Copier l'arborescence dans le presse-papiers")
    
    parser.add_argument("--output", "-o",
                       help="Fichier de sortie pour sauvegarder l'arborescence")
    
    parser.add_argument("--format", "-f",
                       choices=["txt", "json", "html"],
                       default="txt",
                       help="Format de sortie (d√©faut: txt)")
    
    parser.add_argument("--verbose", "-v",
                       action="store_true",
                       help="Mode verbeux (affiche plus d'informations)")
    
    args = parser.parse_args()
    
    # Configuration du logging en mode verbeux
    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)
    
    try:
        # Traitement des exclusions
        exclude_patterns = None
        custom_excludes = None
        use_default_excludes = not args.no_default_excludes
        
        if args.exclude:
            # Patterns fournis remplacent les d√©fauts
            exclude_patterns = [pattern.strip() for pattern in args.exclude.split(",")]
            use_default_excludes = False
        
        if args.add_exclude:
            # Patterns suppl√©mentaires √† ajouter aux d√©fauts
            custom_excludes = [pattern.strip() for pattern in args.add_exclude.split(",")]
        
        # Cr√©ation de l'explorateur
        explorer = DirectoryTreeExplorer(
            show_hidden=args.hidden,
            show_size=not args.no_size,
            max_depth=args.max_depth,
            exclude_patterns=exclude_patterns,
            use_default_excludes=use_default_excludes,
            custom_excludes=custom_excludes
        )
        
        # Affichage des patterns d'exclusion si demand√©
        if args.show_excludes:
            explorer.show_excluded_patterns()
            return 0
        
        directory = Path(args.directory).resolve()
        
        if not directory.exists():
            print(f"‚ùå Erreur: Le dossier '{directory}' n'existe pas!")
            return 1
        
        if not directory.is_dir():
            print(f"‚ùå Erreur: '{directory}' n'est pas un dossier!")
            return 1
        
        # Affichage ou sauvegarde
        if args.output:
            explorer.save_to_file(directory, args.output, args.format)
        else:
            explorer.print_tree(directory, copy_to_clipboard=args.copy)
        
    except KeyboardInterrupt:
        print("\nüëã Exploration interrompue!")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1
    
    return 0


def interactive_mode():
    """Mode interactif pour explorer des dossiers."""
    print("üöÄ Mode interactif - Explorateur d'arborescence")
    print("=" * 50)
    
    while True:
        try:
            print("\nOptions disponibles:")
            print("1. Explorer un dossier")
            print("2. Configurer les exclusions")
            print("3. Afficher l'aide")
            print("4. Quitter")
            
            choice = input("\nChoix (1-4): ").strip()
            
            if choice == "1":
                path = input("Chemin du dossier √† explorer: ").strip()
                if not path:
                    path = "."
                
                show_hidden = input("Afficher les fichiers cach√©s? (o/n): ").lower().startswith('o')
                show_size = not input("Cacher les tailles? (o/n): ").lower().startswith('o')
                
                max_depth_input = input("Profondeur max (vide=illimit√©e): ").strip()
                max_depth = int(max_depth_input) if max_depth_input.isdigit() else None
                
                copy_clipboard = input("Copier dans le presse-papiers? (o/n): ").lower().startswith('o')
                
                explorer = DirectoryTreeExplorer(
                    show_hidden=show_hidden,
                    show_size=show_size,
                    max_depth=max_depth
                )
                
                explorer.print_tree(path, copy_to_clipboard=copy_clipboard)
                
            elif choice == "2":
                print("\nConfiguration des exclusions:")
                print("1. Voir les exclusions actuelles")
                print("2. Utiliser uniquement les exclusions par d√©faut")
                print("3. Ajouter des exclusions personnalis√©es")
                
                config_choice = input("Choix (1-3): ").strip()
                
                if config_choice == "1":
                    explorer = DirectoryTreeExplorer()
                    explorer.show_excluded_patterns()
                elif config_choice in ["2", "3"]:
                    print("Fonctionnalit√© disponible en mode ligne de commande")
                
            elif choice == "3":
                print_help()
                
            elif choice == "4":
                print("üëã Au revoir!")
                break
                
            else:
                print("‚ùå Choix invalide!")
                
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")


def print_help():
    """Affiche l'aide d√©taill√©e."""
    help_text = """
üîç AIDE - Explorateur d'arborescence

FONCTIONNALIT√âS PRINCIPALES:
‚Ä¢ Affichage d'arborescence avec ic√¥nes
‚Ä¢ Exclusion intelligente des dossiers courants (node_modules, venv, etc.)
‚Ä¢ Calcul de statistiques (tailles, types de fichiers, etc.)
‚Ä¢ Copie dans le presse-papiers
‚Ä¢ Export en multiple formats (txt, json, html)
‚Ä¢ Mode interactif

EXCLUSIONS PAR D√âFAUT:
‚Ä¢ Environnements virtuels: venv, env, node_modules, etc.
‚Ä¢ Fichiers de cache: __pycache__, .cache, .pytest_cache, etc.
‚Ä¢ Syst√®mes de contr√¥le de version: .git, .svn, etc.
‚Ä¢ IDEs: .vscode, .idea, etc.
‚Ä¢ Fichiers temporaires: *.tmp, *.log, *.bak, etc.

EXEMPLES D'USAGE:
  python DirectoryTreeExplorer.py                              # Dossier courant
  python DirectoryTreeExplorer.py /path/to/folder --copy       # Avec copie
  python DirectoryTreeExplorer.py . --max-depth 2             # Profondeur limit√©e
  python DirectoryTreeExplorer.py . --no-default-excludes     # Sans exclusions
  python DirectoryTreeExplorer.py . --add-exclude "*.pdf"     # Exclusions custom
  python DirectoryTreeExplorer.py --show-excludes             # Voir exclusions

FORMATS D'EXPORT:
‚Ä¢ TXT: Format texte simple
‚Ä¢ JSON: Structure arborescente pour traitement automatique
‚Ä¢ HTML: Page web interactive avec copie en un clic

INSTALLATION RECOMMAND√âE:
  pip install pyperclip  # Pour la fonctionnalit√© presse-papiers
"""
    print(help_text)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        # Mode interactif si aucun argument
        try:
            interactive_mode()
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
    else:
        # Mode ligne de commande
        exit(main())


# DOCUMENTATION TECHNIQUE
"""
DirectoryTreeExplorer - Explorateur d'arborescence de dossiers am√©lior√©

NOUVELLES FONCTIONNALIT√âS AJOUT√âES:

1. GESTION AVANC√âE DES EXCLUSIONS:
   - Patterns par d√©faut √©tendus incluant node_modules, venv, etc.
   - Option --no-default-excludes pour d√©sactiver les exclusions par d√©faut
   - Option --add-exclude pour ajouter des exclusions personnalis√©es
   - Cache d'exclusion pour optimiser les performances
   - Compteur d'√©l√©ments exclus dans les statistiques

2. PRESSE-PAPIERS:
   - Fonction copy_to_clipboard() compatible multi-plateforme
   - Support pour pyperclip, pbcopy (macOS), xclip/wl-copy (Linux), clip (Windows)
   - Option --copy pour copier automatiquement l'arborescence
   - Bouton de copie dans l'export HTML

3. IC√îNES AM√âLIOR√âES:
   - Ic√¥nes sp√©ciales pour les dossiers syst√®me (.git, node_modules, etc.)
   - Support √©tendu des types de fichiers (TypeScript, Rust, Docker, etc.)
   - Ic√¥nes contextuelles selon le type de dossier

4. STATISTIQUES √âTENDUES:
   - Compteur d'√©l√©ments exclus
   - Compteur d'erreurs de permission
   - D√©tection des dossiers vides am√©lior√©e

5. MODE INTERACTIF:
   - Lancement automatique si aucun argument fourni
   - Interface utilisateur simple pour configurer l'exploration
   - Gestion des exceptions am√©lior√©e

6. EXPORT HTML AM√âLIOR√â:
   - Bouton de copie JavaScript int√©gr√©
   - Styles am√©lior√©s avec th√®me sombre
   - Responsive design

7. OPTIONS SUPPL√âMENTAIRES:
   - --verbose pour plus d'informations de debug
   - --show-excludes pour voir les patterns actifs
   - Validation des arguments am√©lior√©e

UTILISATION RECOMMAND√âE:

Pour un usage quotidien:
  python DirectoryTreeExplorer.py ~/projet --copy

Pour analyser un projet sans pollution:
  python DirectoryTreeExplorer.py . --max-depth 3 --add-exclude "*.min.js,dist"

Pour export document√©:
  python DirectoryTreeExplorer.py . --output arbre.html --format html

OPTIMISATIONS:
- Cache d'exclusion pour √©viter les r√©√©valuations
- Tri optimis√© (dossiers avant fichiers)
- Gestion robuste des erreurs de permission
- Logging configurable selon le niveau de verbosit√©

D√âPENDANCES OPTIONNELLES:
- pyperclip: Pour la fonctionnalit√© presse-papiers optimale
- Outils syst√®me: pbcopy, xclip, wl-copy, clip selon la plateforme

COMPATIBILIT√â:
- Python 3.6+
- Windows, macOS, Linux
- Tous environnements de d√©veloppement courants
"""